# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: -all
#     text_representation:
#       extension: .jl
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.14.4
#   kernelspec:
#     display_name: Julia 1.9.0
#     language: julia
#     name: julia-1.9
# ---

#
# # Generate surface currents
#
# Load all necessary modules

using CoastalCurrents
using CoastalCurrents: Altimetry
using DIVAnd_HFRadar
using PhysOcean
using GeoMapping
using PyPlot
using NCDatasets
using Dates
using Test
using DIVAnd
using DataStructures
using Statistics

include("common.jl")

# Load the data generated by `prep_altimetry` notebook/script. All variables are vectors (list of tracks) of vectors (individual tracks). We are not using a matrix
# since each tracks can have a different length.
#
# * `mdt`: mean dynamic topography
# * `sla`: sea-level anomalies
# * `lon`,`lat`,`time`: longitude,latitude and time
# * `id`: identifier of the track

ds = NCDataset(altimetry_fname)
mdt = NCDatasets.loadragged(ds["mdt"],:)
sla = NCDatasets.loadragged(ds["slaf"],:)
lon = NCDatasets.loadragged(ds["lon"],:)
lat = NCDatasets.loadragged(ds["lat"],:)
time = NCDatasets.loadragged(ds["time"],:)
id = NCDatasets.loadragged(ds["id"],:)
close(ds);

# Time range covered by the data

extrema(reduce(vcat,time))

# Number of tracks

length(lon)

# Average length of each track

mean(length.(lon))

plt.hist2d(reduce(vcat,lon),reduce(vcat,lat),(lonr,latr))
colorbar(orientation="horizontal",label="count")
CoastalCurrents.Plotting.plotmap(bathname)
title("Data count per bins of $(step(lonr))° x $(step(latr))° ");

# Compute absolute dynamic topography (`adt`)

adt = mdt .+ sla;

# Compute geostrophic velocity

(lona_,lata_,timea_,ua_,va_) = Altimetry.geostrophic_velocity(lon,lat,time,adt);


# Plot a couple of tracks to verify the orientation of the velocity

clf()
scale = 5
for i = [2 4 6 8]
    scatter(lon[i],lat[i],10,adt[i]);
    r = 1:3:length(lona_[i])
    quiver(lona_[i][r],lata_[i][r],ua_[i][r],va_[i][r],scale=scale,lw = 0.1)
end
colorbar()
CoastalCurrents.Plotting.plotmap(bathname)
title("Geostrophic surface currents")


# Concatenate the data into a single vector

lona = reduce(vcat,lona_);
lata = reduce(vcat,lata_);
timea = reduce(vcat,timea_);
ua = reduce(vcat,ua_);
va = reduce(vcat,va_);


# Select the data to be used
# Here we use all data of the year 2000
# To select all the data of the month january for example one would use
# ```julia
#  sel = @. Dates.Month(timea) == 1
# ```

sel = @. Dates.DateTime(2000,1,1) <= timea < Dates.DateTime(2001,1,1);
lona = lona[sel];
lata = lata[sel];
timea = timea[sel];
ua = ua[sel];
va = va[sel];


# Compute current speed `robs` and direction `directionobs`.
# `directionobs` is the angle in degree relative to North counted clock-wise
# see DIVAndrun_HFRadar

robs = sqrt.(ua.^2 + va.^2)
directionobs = atand.(ua,va);


# Set-up the domain

mask,(pm,pn),(xi,yi) = DIVAnd.domain(bathname,bathisglobal,lonr,latr)
mask = DIVAnd.floodfill(mask) .== 1
hx, hy, h = DIVAnd.load_bath(bathname, bathisglobal, lonr, latr);

# Ignore data which are NaN

valid = isfinite.(robs);
x = lona[valid];
y = lata[valid];
robs = robs[valid];
directionobs = directionobs[valid];

# Choose analysis parameters

len = 150e3
epsilon2 = 2.
eps2_boundary_constraint = -1
eps2_div_constraint = 1
g = 0;


# Make the DIVAnd analysis

uri,vri,ηi = DIVAndrun_HFRadar(
    mask,h,(pm,pn),(xi,yi),(x,y),robs,directionobs,len,epsilon2;
    eps2_boundary_constraint = eps2_boundary_constraint,
    eps2_div_constraint = eps2_div_constraint,
    # eps2_Coriolis_constraint = -1,
    # f = 0.001,
    # residual = residual,
    # g = g,
    # ratio = 100,
    # lenη = (000.0, 000.0, 24 * 60 * 60. * 10),
    # maxit = 100000,
    # tol = 1e-6,
);


# Save the results

timei = timea[1:1]
CoastalCurrents.save(
    result_filename,
    (xi[:,1],yi[1,:],timei[1:1]),
    (uri[:,:,1:1],vri[:,:,1:1]))


# Plot results

color = sqrt.(uri.^2 + vri.^2)
clf()
r = CartesianIndices(( 1:2:size(mask,1) ,1:2:size(mask,2)))
r = CartesianIndices(( 1:1:size(mask,1) ,1:1:size(mask,2)))
quiver(xi[r],yi[r],uri[r],vri[r],color[r],cmap="jet")
colorbar(orientation="horizontal")
CoastalCurrents.Plotting.plotmap(bathname)
title("surface current " * join(Dates.format.((minimum(timea),maximum(timea)),"yyyy-mm-dd")," - "));

# Visalize with the leaflet javascript library 🍃

CoastalCurrents.Plotting.plot(xi,yi,uri,vri,scale = 15,maxvelocity = 0.05);


